version: "3.9"

services:
  rabbitmq:
    image: rabbitmq:4.1-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-guest}
    volumes:
      - "rabbitmq-data:/var/lib/rabbitmq"
      - ./scripts:/scripts
    healthcheck:
      test: |
        rabbitmq-diagnostics -q ping && 
        rabbitmq-diagnostics check_running && 
        rabbitmqctl list_queues name | grep -q commands &&
        rabbitmqctl list_queues name | grep -q price_change_level_1 &&
        rabbitmqctl list_queues name | grep -q price_change_level_2 &&
        rabbitmqctl list_queues name | grep -q price_change_level_3 &&
        rabbitmqctl list_exchanges name | grep -q price_changes
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    command: |
      sh -c '
        # Start RabbitMQ in background
        rabbitmq-server &
        RABBIT_PID=$$!
        
        # Wait for RabbitMQ to start
        echo "Waiting for RabbitMQ to start..."
        sleep 15
        
        # Run setup script
        echo "Running RabbitMQ setup..."
        chmod +x /scripts/rabbit-init.sh
        /scripts/rabbit-init.sh
        
        echo "RabbitMQ setup completed successfully"
        
        # Wait for RabbitMQ to keep running
        wait $$RABBIT_PID
      '

  provider:
    build: .
    command: |
      bash -c 'cd provider && uvicorn main:app --host 0.0.0.0 --port 8080 --reload'
    ports:
      - "8080:8080"
    volumes:
      - ./provider:/app/provider
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  aggregator:
    build: .
    command: |
      bash -c 'cd aggregator && python main.py'
    volumes:
      - ./aggregator:/app/aggregator
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672/
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: |
        python -c "
        import asyncio
        import aio_pika
        import os
        async def check():
            try:
                connection = await aio_pika.connect_robust(os.getenv('RABBITMQ_URL'))
                channel = await connection.channel()
                # Проверяем что все очереди созданы
                queues_to_check = ['commands', 'price_change_level_1', 'price_change_level_2', 'price_change_level_3']
                for queue in queues_to_check:
                    await channel.get_queue(queue)
                await connection.close()
                print('All RabbitMQ queues are available')
                return True
            except Exception as e:
                print(f'RabbitMQ check failed: {e}')
                return False
        asyncio.run(check())
        " || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

volumes:
  rabbitmq-data:
    driver: local